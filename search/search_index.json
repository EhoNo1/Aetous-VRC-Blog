{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mastodon Welcome! Hello! Welcome to my humble little blog! It's a simple little one-stop shop for all my ramblings that don't necessitate a website site in and of themselves. Hope you find something useful here! If you'd like to support me check out the Support Me! page!","title":"Home"},{"location":"#welcome","text":"Hello! Welcome to my humble little blog! It's a simple little one-stop shop for all my ramblings that don't necessitate a website site in and of themselves. Hope you find something useful here! If you'd like to support me check out the Support Me! page!","title":"Welcome!"},{"location":"About/Commissions/","text":"Commissions Mastodon I make Optimized and Mobile friendly fully customizable VRC worlds. If you have any questions please pop me an email over at Aetous@proton.me . And please read the Important Notes section before commissioning. World Commissions Optimization/Quest Porting Already got a world but don't want to bother or don't know how to port it to Quest? I got you! $ 50 Quest Porting From Scratch World Rooms $ 65 Small Room (1 Point of interest*) $125 Medium Size Room (2 points of interest*) $175 Large Room (3 Points of interest*) * Points of interest are singular spots or subsections of a room where people like to congregate. They can vary in size, but every point of interest can be expected to hold around 2-6 people. Environments $30 3D External environment. $FREE 2D Skybox (a free or CC0 asset found elsewhere). Code Commissions Need someone to write some Udon# code for you? I got you. Price varies depending on complexity, reach out to me and we'll figure out a price. Important Notes You will receive the source files for the project. I do not maintain your projects for you after completion of the commission. If you want me to work on a preexisting project; I'll only accept those files in the form of a .unitypackage for security. (Don't worry I can guide you through the process of exporting this.) I may choose too, but I'm not responsible for keeping backups of your project. Please keep your own backups. If you want me to use any paid assets then you must provide proof of purchase of all paid assets. (I can source my own copies, but most licenses require all parties to have purchased the asset.) You are permitted three (3) revisions after development of the project has begun. I may choose not to count some smaller/minimally destructive revisions. I get the final say as to what changes count to this total. These prices are subject to change at any time. I may choose to update these prices from time-to-time. Final prices be different depending on the complexity. If your project is more or less complex we may negotiate a lower or higher price. All prices are in USD. Half of payment is expected upfront. Second Half is due at completion before the project files are provided. Paying the full price early is permitted and greatly appreciated, but does not automatically grant expedited service.","title":"Commissions"},{"location":"About/Commissions/#commissions","text":"Mastodon I make Optimized and Mobile friendly fully customizable VRC worlds. If you have any questions please pop me an email over at Aetous@proton.me . And please read the Important Notes section before commissioning.","title":"Commissions"},{"location":"About/Commissions/#world-commissions","text":"","title":"World Commissions"},{"location":"About/Commissions/#optimizationquest-porting","text":"Already got a world but don't want to bother or don't know how to port it to Quest? I got you! $ 50 Quest Porting","title":"Optimization/Quest Porting"},{"location":"About/Commissions/#from-scratch-world","text":"","title":"From Scratch World"},{"location":"About/Commissions/#rooms","text":"$ 65 Small Room (1 Point of interest*) $125 Medium Size Room (2 points of interest*) $175 Large Room (3 Points of interest*) * Points of interest are singular spots or subsections of a room where people like to congregate. They can vary in size, but every point of interest can be expected to hold around 2-6 people.","title":"Rooms"},{"location":"About/Commissions/#environments","text":"$30 3D External environment. $FREE 2D Skybox (a free or CC0 asset found elsewhere).","title":"Environments"},{"location":"About/Commissions/#code-commissions","text":"Need someone to write some Udon# code for you? I got you. Price varies depending on complexity, reach out to me and we'll figure out a price.","title":"Code Commissions"},{"location":"About/Commissions/#important-notes","text":"You will receive the source files for the project. I do not maintain your projects for you after completion of the commission. If you want me to work on a preexisting project; I'll only accept those files in the form of a .unitypackage for security. (Don't worry I can guide you through the process of exporting this.) I may choose too, but I'm not responsible for keeping backups of your project. Please keep your own backups. If you want me to use any paid assets then you must provide proof of purchase of all paid assets. (I can source my own copies, but most licenses require all parties to have purchased the asset.) You are permitted three (3) revisions after development of the project has begun. I may choose not to count some smaller/minimally destructive revisions. I get the final say as to what changes count to this total. These prices are subject to change at any time. I may choose to update these prices from time-to-time. Final prices be different depending on the complexity. If your project is more or less complex we may negotiate a lower or higher price. All prices are in USD. Half of payment is expected upfront. Second Half is due at completion before the project files are provided. Paying the full price early is permitted and greatly appreciated, but does not automatically grant expedited service.","title":"Important Notes"},{"location":"About/Contact/","text":"Contact Email: Aetous@aeto.us Work Email: Aetous@Tailtwist.studio Mastodon: @Aetous@cyberfurz.social Email contact preferred. For postal contact please reach out over email first.","title":"Contact"},{"location":"About/Contact/#contact","text":"Email: Aetous@aeto.us Work Email: Aetous@Tailtwist.studio Mastodon: @Aetous@cyberfurz.social Email contact preferred. For postal contact please reach out over email first.","title":"Contact"},{"location":"About/SpecialThanks/","text":"Special Thanks (In no particular order.) My Found Family Including but not limited to: Toy Dragon Star Ruby Jaycie Starseeker Oci Rez Subnet My Patreon Subscribers Freakus TeeJabs Toy Dragon VRC Community Members RobertWK Yoshark","title":"Special Thanks"},{"location":"About/SpecialThanks/#special-thanks","text":"(In no particular order.)","title":"Special Thanks"},{"location":"About/SpecialThanks/#my-found-family","text":"Including but not limited to: Toy Dragon Star Ruby Jaycie Starseeker Oci Rez Subnet","title":"My Found Family"},{"location":"About/SpecialThanks/#my-patreon-subscribers","text":"Freakus TeeJabs Toy Dragon","title":"My Patreon Subscribers"},{"location":"About/SpecialThanks/#vrc-community-members","text":"RobertWK Yoshark","title":"VRC Community Members"},{"location":"About/SupportMe/","text":"Support Me I do all of my work for barely enough for a coffee. If you enjoy it and want more please consider tossing me some change or consider dropping by my livestreams! Patreon: Aetous Ko-Fi: TailTwistStudios Twitch: TailTwistStudios Discord Community: https://discord.gg/7aZTnd7mHB","title":"Support Me"},{"location":"About/SupportMe/#support-me","text":"I do all of my work for barely enough for a coffee. If you enjoy it and want more please consider tossing me some change or consider dropping by my livestreams! Patreon: Aetous Ko-Fi: TailTwistStudios Twitch: TailTwistStudios Discord Community: https://discord.gg/7aZTnd7mHB","title":"Support Me"},{"location":"Apps%20%26%20Games/Realtime%20Parameter%20Tracker/","text":"Realtime Parameter Tracker Realtime Parameter tracker is a standalone companion app for VRChat that enables you to puppet an avatar parameter over a long period of time, between sessions, in real-time. You can use it to simulate real transitions or effects over the course hours, days and months, with everything occurring in real-world time. Imagine clothing that slowly morphs with the seasons, robots that slowly rust over months or years, or enabling your characters to transition over realtime-scales. I've made an effort to make it as user friendly as possible, and I'll gladly add features as people request them over on the issue tracker! Where to get it The app is available over on my Patreon for a minimum of $5. (I won't be upset if you subscribe for only a month, but you'll need to be subscribed for future updates.)","title":"Realtime Parameter Tracker"},{"location":"Apps%20%26%20Games/Realtime%20Parameter%20Tracker/#realtime-parameter-tracker","text":"Realtime Parameter tracker is a standalone companion app for VRChat that enables you to puppet an avatar parameter over a long period of time, between sessions, in real-time. You can use it to simulate real transitions or effects over the course hours, days and months, with everything occurring in real-world time. Imagine clothing that slowly morphs with the seasons, robots that slowly rust over months or years, or enabling your characters to transition over realtime-scales. I've made an effort to make it as user friendly as possible, and I'll gladly add features as people request them over on the issue tracker!","title":"Realtime Parameter Tracker"},{"location":"Apps%20%26%20Games/Realtime%20Parameter%20Tracker/#where-to-get-it","text":"The app is available over on my Patreon for a minimum of $5. (I won't be upset if you subscribe for only a month, but you'll need to be subscribed for future updates.)","title":"Where to get it"},{"location":"Apps%20%26%20Games/UntitledRacingGame/about/","text":"About Play The Game","title":"About"},{"location":"Apps%20%26%20Games/UntitledRacingGame/about/#about","text":"","title":"About"},{"location":"Apps%20%26%20Games/UntitledRacingGame/about/#play-the-game","text":"","title":"Play The Game"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/","text":"Snapshot 0.1w1 Published: 9/7/2024 Ah shit, its been a while hasn't it? Sorry about that! It's been a wild ass half a year since I last talked about this game in depth. I've been through a lot of serious life milestones that needed attention, and I'm currently actively looking for a job (if you need a Unity, C# or JS dev email me !) The game too has been through a lot of milestones under the hood, some good some bad. What is this game again? As the WIP name \"UnityRiders\" implies, it is a from-scratch clean-room spiritual successor to Sonic Riders made in Unity. My goal is not to replace Sonic Riders but to capture the frantic energetic gameplay and bring it forward in a format that is more accessible to modern players. The original games have only ever been released on now officially unsupported hardware, and aftermarket resale copies are reaching the point where there might not be enough copies on the market for the games to have a serious resurgence. SEGA/Sonic Team haven't appeared to make any moves preserve or rerelease these games on modern hardware (that we know of, they remade Sonic Colors from scratch to rerelease). There have been a handful of fan remakes, but all of whom seem to be interested in emulating the success original rather than spinning off and taking the games in a new direction. All of them use unlicensed SEGA characters, preventing them being allowed to market the games or attempt any kind of commercial endeavor with them. They all live and die by the charity of the sonic fanbase, which is all well and good and great for nostalgia but can't actively attract new fans. So I'm taking it into my own hands, I'm developing new title intending to be sequel in gameplay alone, featuring a new cast of original characters, and unique gameplay mechanics to set it apart from it's sources of inspiration. All of which is being developed entirely from scratch in Unity Engine. (Why Unity? I know you're asking that after the Runtime Fee shitshow. The only reason I'm developing in unity is because I've already spent a decade using it, and I wanted to release something in it before investing another decade in learning something else. I've looked into it, and Unity got scared so shitless they walked back nearly everything about the runtime fee to the point it's just a marginal price increase now. Not to mention, for indies and small teams it only applies to \"pro\" users/teams who can still earn up to $1,000,000 a year before being obligated to pay anything at all. And if you don't need pro for technical reasons; you can earn up to $200,000 a year before being obligated to upgrade to pro.) Show me the Goods Okay here you go! Download 0.1w1 Frankly there's a metric ass-ton of changes under the hood but not much on the surface. A lot of smaller features that still exist in code (like computer players) for example were cut out due to not being implemented fully after the refactor. Next week I want to work on fixing up a lot of the broken features, and adding more visual effects that affect the energy of the game. Changelog PlayerController related scripts have been heavily refactored and combined to improve maintainability. PlayerController script now use a standardized abstract InputFrame system that all character controlling systems (Human player, computer player, potentially ghost data replayers?) can have a standardized system of providing inputs. Heavily refactored and cleaned up PlayerController to be easier to better conform to design standards and eliminate redundant and extraneous code. Created CompetentAnimator , a scripted animator that access and animates values directly so that the vagueness and bugs of Unity's animation system won't slow down development. (God I'm so frustrated with it.) Created a dynamic anime-style speed lines particle system to indicate high speeds. Fixed fuel gauge and Speedometer. Fixed logical error in ItemBox es that prevented them from being picked up. Entirely removed Cinemachine from the project. Increased fuel-drain to better values. Player is now assigned a camera more robustly, simplifying setup. Added Robot Kyle for future humanoid animation testing. (Hi Kyle!) Properly connected new input system to boosting code. Fixed a bug where player could boost in any movement state. Player should only be able to boost while riding their board. Cleaned up boosting code. Fixed a bug that prevented the slide button from registering. Special Thanks to My Patrons Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Snapshot 0.1w1"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/#snapshot-01w1","text":"Published: 9/7/2024 Ah shit, its been a while hasn't it? Sorry about that! It's been a wild ass half a year since I last talked about this game in depth. I've been through a lot of serious life milestones that needed attention, and I'm currently actively looking for a job (if you need a Unity, C# or JS dev email me !) The game too has been through a lot of milestones under the hood, some good some bad.","title":"Snapshot 0.1w1"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/#what-is-this-game-again","text":"As the WIP name \"UnityRiders\" implies, it is a from-scratch clean-room spiritual successor to Sonic Riders made in Unity. My goal is not to replace Sonic Riders but to capture the frantic energetic gameplay and bring it forward in a format that is more accessible to modern players. The original games have only ever been released on now officially unsupported hardware, and aftermarket resale copies are reaching the point where there might not be enough copies on the market for the games to have a serious resurgence. SEGA/Sonic Team haven't appeared to make any moves preserve or rerelease these games on modern hardware (that we know of, they remade Sonic Colors from scratch to rerelease). There have been a handful of fan remakes, but all of whom seem to be interested in emulating the success original rather than spinning off and taking the games in a new direction. All of them use unlicensed SEGA characters, preventing them being allowed to market the games or attempt any kind of commercial endeavor with them. They all live and die by the charity of the sonic fanbase, which is all well and good and great for nostalgia but can't actively attract new fans. So I'm taking it into my own hands, I'm developing new title intending to be sequel in gameplay alone, featuring a new cast of original characters, and unique gameplay mechanics to set it apart from it's sources of inspiration. All of which is being developed entirely from scratch in Unity Engine. (Why Unity? I know you're asking that after the Runtime Fee shitshow. The only reason I'm developing in unity is because I've already spent a decade using it, and I wanted to release something in it before investing another decade in learning something else. I've looked into it, and Unity got scared so shitless they walked back nearly everything about the runtime fee to the point it's just a marginal price increase now. Not to mention, for indies and small teams it only applies to \"pro\" users/teams who can still earn up to $1,000,000 a year before being obligated to pay anything at all. And if you don't need pro for technical reasons; you can earn up to $200,000 a year before being obligated to upgrade to pro.)","title":"What is this game again?"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/#show-me-the-goods","text":"Okay here you go! Download 0.1w1 Frankly there's a metric ass-ton of changes under the hood but not much on the surface. A lot of smaller features that still exist in code (like computer players) for example were cut out due to not being implemented fully after the refactor. Next week I want to work on fixing up a lot of the broken features, and adding more visual effects that affect the energy of the game.","title":"Show me the Goods"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/#changelog","text":"PlayerController related scripts have been heavily refactored and combined to improve maintainability. PlayerController script now use a standardized abstract InputFrame system that all character controlling systems (Human player, computer player, potentially ghost data replayers?) can have a standardized system of providing inputs. Heavily refactored and cleaned up PlayerController to be easier to better conform to design standards and eliminate redundant and extraneous code. Created CompetentAnimator , a scripted animator that access and animates values directly so that the vagueness and bugs of Unity's animation system won't slow down development. (God I'm so frustrated with it.) Created a dynamic anime-style speed lines particle system to indicate high speeds. Fixed fuel gauge and Speedometer. Fixed logical error in ItemBox es that prevented them from being picked up. Entirely removed Cinemachine from the project. Increased fuel-drain to better values. Player is now assigned a camera more robustly, simplifying setup. Added Robot Kyle for future humanoid animation testing. (Hi Kyle!) Properly connected new input system to boosting code. Fixed a bug where player could boost in any movement state. Player should only be able to boost while riding their board. Cleaned up boosting code. Fixed a bug that prevented the slide button from registering.","title":"Changelog"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w1/#special-thanks-to-my-patrons","text":"Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Special Thanks to My Patrons"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w2/","text":"Snapshot 0.1w2 Published: 9/14/2024 Oh Snap! (shot) Shoutout to Distractible podcast, I've been binge listening to them as background noise while I work. Not as much work on this weeks snapshot as I had hoped, but there's still a considerable amount. I recently got a set of drawing/animation reference figurines, so I'm looking to start developing some references for the future. I'm also considering moving these snapshots to Thursday or Friday, rather than late Saturday, this way you all can more easily play this week's snapshot over the weekend! Download Download 0.1w2 Changelog Fixed a bug that prevented the boost sound from playing. Trail now properly toggles when shifting between riding mode and walking mode. Converted project to Universal Render Pipeline. The debug mesh for Jump Gates now no longer render (on the player side). The camera now drifts slightly to the left and right at speed and make cornering more intense. Speed particles now tilt into the direction you're going. Refactored some adjustable stats out of PlayerController and moved them to a separate BoardStats object. Special Thanks to My Patrons Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Snapshot 0.1w2"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w2/#snapshot-01w2","text":"Published: 9/14/2024 Oh Snap! (shot) Shoutout to Distractible podcast, I've been binge listening to them as background noise while I work. Not as much work on this weeks snapshot as I had hoped, but there's still a considerable amount. I recently got a set of drawing/animation reference figurines, so I'm looking to start developing some references for the future. I'm also considering moving these snapshots to Thursday or Friday, rather than late Saturday, this way you all can more easily play this week's snapshot over the weekend!","title":"Snapshot 0.1w2"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w2/#download","text":"Download 0.1w2","title":"Download"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w2/#changelog","text":"Fixed a bug that prevented the boost sound from playing. Trail now properly toggles when shifting between riding mode and walking mode. Converted project to Universal Render Pipeline. The debug mesh for Jump Gates now no longer render (on the player side). The camera now drifts slightly to the left and right at speed and make cornering more intense. Speed particles now tilt into the direction you're going. Refactored some adjustable stats out of PlayerController and moved them to a separate BoardStats object.","title":"Changelog"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w2/#special-thanks-to-my-patrons","text":"Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Special Thanks to My Patrons"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w3/","text":"Snapshot 0.1w3 Published: 9/20/2024 Heyo! Another week down, didn't get much work done, but the game feels a lot better with more aesthetic ! (Turns out half of game design is just making it feel good.) Download Download 0.1w3 Changelog Acquired some royalty free music to ensure the game's vibe is up to the challenge. Huge shoutout to Ovani Sound for making this even a possibility and Humble Bundle for helping it's sale raise money for charity. Removed existing split-screen multiplayer code for maintainability. Split-screen multiplayer is out of scope for now. Added Synthpop Music Pack Vol 1, \"Sunset Strip\" as generic Race Finish music. The non-CPU player finishing a race now triggers the Race Finish music. Added Electronic Music Pack Vol 4, \"On A Mission\" as Ventus Rush level BGM. Created custom ItemBox Model. Changed Item box collection sound to a glass shatter effect. Fixed a bug that stopped ItemBox collection sounds from playing. Fixed formatting errors in ItemBox . Added particles to ItemBox that increase with speed and blast in the player's movement direction. Special Thanks to My Patrons Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Snapshot 0.1w3"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w3/#snapshot-01w3","text":"Published: 9/20/2024 Heyo! Another week down, didn't get much work done, but the game feels a lot better with more aesthetic ! (Turns out half of game design is just making it feel good.)","title":"Snapshot 0.1w3"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w3/#download","text":"Download 0.1w3","title":"Download"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w3/#changelog","text":"Acquired some royalty free music to ensure the game's vibe is up to the challenge. Huge shoutout to Ovani Sound for making this even a possibility and Humble Bundle for helping it's sale raise money for charity. Removed existing split-screen multiplayer code for maintainability. Split-screen multiplayer is out of scope for now. Added Synthpop Music Pack Vol 1, \"Sunset Strip\" as generic Race Finish music. The non-CPU player finishing a race now triggers the Race Finish music. Added Electronic Music Pack Vol 4, \"On A Mission\" as Ventus Rush level BGM. Created custom ItemBox Model. Changed Item box collection sound to a glass shatter effect. Fixed a bug that stopped ItemBox collection sounds from playing. Fixed formatting errors in ItemBox . Added particles to ItemBox that increase with speed and blast in the player's movement direction.","title":"Changelog"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w3/#special-thanks-to-my-patrons","text":"Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Special Thanks to My Patrons"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w4/","text":"Snapshot 0.1w4 Published: 10/4/2024 Whoops! This one's a week late. Got a hell of a lot done on the project, then got to the point with my other obligations that I just needed a week off. Hope you enjoy! Download Download 0.1w4 Changelog Completely removed Jump Gates from VentusRush Renamed Proving Grounds to VentusRush, Renamed Ventus Tumble to Underground. Created VentusRush bridge. Created FBX Import preset to save time. Doubled minimum DashPad speed boost. CPU players are now properly setup. Reformatted boolean value of playSounds to a boolean function ShouldPlayEffects that asks whether or not it's appropriate to play effects triggered by this PlayerController . Reorganized the player's particles and sounds (internal effects) to separate Internal VS External sounds. Setting a player use to any kind of InputWrapper will now automatically toggle the player's internal effects. Added a few more item boxes to fill out Ventus Rush Refactored multiple board-specific player configuration values out of PlayerController and into BoardStats . Fixed a magic number in PlayerController . (Oops.) Added GetStateSpecificMaxSpeed() to the player's speedometer. Fixed a bug that prevented the player from switching out of MovementMode.Riding when they ran out of fuel. Refactored braking to be easier to understand. Item box particles no longer erroneously play on awake. Fixed multiple logical errors that prevented braking from working properly. Brake particles now play as intended. Refactored contact counting out of PlayerController and into a generic ContactCounter . Fuel bar now correctly displays cost of boosting and doesn't peak it's own bounds. Fixed bug where all players, both human and CPU would trigger the after-race music. Special Thanks to My Patrons Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Snapshot 0.1w4"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w4/#snapshot-01w4","text":"Published: 10/4/2024 Whoops! This one's a week late. Got a hell of a lot done on the project, then got to the point with my other obligations that I just needed a week off. Hope you enjoy!","title":"Snapshot 0.1w4"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w4/#download","text":"Download 0.1w4","title":"Download"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w4/#changelog","text":"Completely removed Jump Gates from VentusRush Renamed Proving Grounds to VentusRush, Renamed Ventus Tumble to Underground. Created VentusRush bridge. Created FBX Import preset to save time. Doubled minimum DashPad speed boost. CPU players are now properly setup. Reformatted boolean value of playSounds to a boolean function ShouldPlayEffects that asks whether or not it's appropriate to play effects triggered by this PlayerController . Reorganized the player's particles and sounds (internal effects) to separate Internal VS External sounds. Setting a player use to any kind of InputWrapper will now automatically toggle the player's internal effects. Added a few more item boxes to fill out Ventus Rush Refactored multiple board-specific player configuration values out of PlayerController and into BoardStats . Fixed a magic number in PlayerController . (Oops.) Added GetStateSpecificMaxSpeed() to the player's speedometer. Fixed a bug that prevented the player from switching out of MovementMode.Riding when they ran out of fuel. Refactored braking to be easier to understand. Item box particles no longer erroneously play on awake. Fixed multiple logical errors that prevented braking from working properly. Brake particles now play as intended. Refactored contact counting out of PlayerController and into a generic ContactCounter . Fuel bar now correctly displays cost of boosting and doesn't peak it's own bounds. Fixed bug where all players, both human and CPU would trigger the after-race music.","title":"Changelog"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w4/#special-thanks-to-my-patrons","text":"Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Special Thanks to My Patrons"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/","text":"Snapshot 0.1w5 Published: 10/4/2024 Download Download 0.1w4 Changelog - Removed a large number of unused dependencies. Special Thanks to My Patrons Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Snapshot 0.1w5"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/#snapshot-01w5","text":"Published: 10/4/2024","title":"Snapshot 0.1w5"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/#download","text":"Download 0.1w4","title":"Download"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/#changelog","text":"","title":"Changelog"},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/#-removed-a-large-number-of-unused-dependencies","text":"","title":"- Removed a large number of unused dependencies."},{"location":"Apps%20%26%20Games/UntitledRacingGame/Snapshots/Snapshot%200.1w5/#special-thanks-to-my-patrons","text":"Freakus ToyDragon Teejabs If you like my work, consider Supporting Me!","title":"Special Thanks to My Patrons"},{"location":"Guides/Avatar%20Texture%20Optimization/","text":"Avatar Texture Optimization Written: 5/2/2024 So if you're reading this, you've probably been suggested to optimize your avatar's textures. Don't worry, from my opinion it's genuinely the easiest form of optimization to do in VRChat. It's reversible and is done by a single dropdown, seriously. If you can upload your own avatar you have all the skills you need to optimize your textures. The Quickest Tutorial You've Ever Seen In your avatar's unity project, browse to your textures and highlight them in the Project tab, this will open it's import settings in the Inspector tab. (You can bulk select textures if you'd like, just make sure you don't accidentally select a non-texture or else the inspector won't show anything.) Find the Max Size dropdown and change it to something realistic and then click apply. That's the whole tutorial. I'm serious. Don't forget to reupload your avatar when you're done! Example from the Meownyrn base from FrostKittyPaw. This number is the maximum size the texture will be allowed to be exported at. You can work on this texture at any size you like and keep it's original source file at any size you like . The only number that really matters is this Max Size setting. By default, Unity will set it to 2048 , this can be overridden by an avatar creator or by you if you need it. Personally I recommend going through your textures and lowering to the point just above you notice there's a difference in texture. If it's the texture of something tiny, like a ring, you might lower lower it to something like 256 or 128 . Use your best judgement, if you decide you need more you can always go back and raise it later. One more thing: do not use crunch compression. Why? Crunch compression uses a more aggressive and expensive compression algorithms to greatly reduce the exported file size. This exclusively saves file size and nothing else, in fact, the texture must the be decrunched on the receiving end before being loaded into VRAM at the same size it would have been without crunch compression . So you're not only not saving any VRAM, by using it you're increasing the resources it takes to load it in the first place. Is it dangerous? No! This is a nondestructive action, it can be reversed at any time, and doesn't touch the original file, only the copy of the original that gets exported and shows up in VRAM . What happens if I crank it too high? Unity won't scale up the texture beyond it's source resolution. So if you've set a 2k texture to be 8K, it won't magically make it higher resolution. Unity doesn't know how to add more detail, so it doesn't bother. But it will constrain it to the max resolution if the source file ever becomes a larger resolution.","title":"Avatar Texture Optimization"},{"location":"Guides/Avatar%20Texture%20Optimization/#avatar-texture-optimization","text":"Written: 5/2/2024 So if you're reading this, you've probably been suggested to optimize your avatar's textures. Don't worry, from my opinion it's genuinely the easiest form of optimization to do in VRChat. It's reversible and is done by a single dropdown, seriously. If you can upload your own avatar you have all the skills you need to optimize your textures.","title":"Avatar Texture Optimization"},{"location":"Guides/Avatar%20Texture%20Optimization/#the-quickest-tutorial-youve-ever-seen","text":"In your avatar's unity project, browse to your textures and highlight them in the Project tab, this will open it's import settings in the Inspector tab. (You can bulk select textures if you'd like, just make sure you don't accidentally select a non-texture or else the inspector won't show anything.) Find the Max Size dropdown and change it to something realistic and then click apply. That's the whole tutorial. I'm serious. Don't forget to reupload your avatar when you're done! Example from the Meownyrn base from FrostKittyPaw. This number is the maximum size the texture will be allowed to be exported at. You can work on this texture at any size you like and keep it's original source file at any size you like . The only number that really matters is this Max Size setting. By default, Unity will set it to 2048 , this can be overridden by an avatar creator or by you if you need it. Personally I recommend going through your textures and lowering to the point just above you notice there's a difference in texture. If it's the texture of something tiny, like a ring, you might lower lower it to something like 256 or 128 . Use your best judgement, if you decide you need more you can always go back and raise it later. One more thing: do not use crunch compression. Why? Crunch compression uses a more aggressive and expensive compression algorithms to greatly reduce the exported file size. This exclusively saves file size and nothing else, in fact, the texture must the be decrunched on the receiving end before being loaded into VRAM at the same size it would have been without crunch compression . So you're not only not saving any VRAM, by using it you're increasing the resources it takes to load it in the first place.","title":"The Quickest Tutorial You've Ever Seen"},{"location":"Guides/Avatar%20Texture%20Optimization/#is-it-dangerous","text":"No! This is a nondestructive action, it can be reversed at any time, and doesn't touch the original file, only the copy of the original that gets exported and shows up in VRAM .","title":"Is it dangerous?"},{"location":"Guides/Avatar%20Texture%20Optimization/#what-happens-if-i-crank-it-too-high","text":"Unity won't scale up the texture beyond it's source resolution. So if you've set a 2k texture to be 8K, it won't magically make it higher resolution. Unity doesn't know how to add more detail, so it doesn't bother. But it will constrain it to the max resolution if the source file ever becomes a larger resolution.","title":"What happens if I crank it too high?"},{"location":"Guides/MyPreferredAssets/","text":"Here's a general list (in no particular order) of various assets and asset stores I browse to find resources for my world projects: Note: I use the phrase \"Free\" with quotes to mark assets that are monetarily free but may have contractual strings attached. Use your best judgement when deciding whether to use one of these. 3DAsset.One (\"Free\") - A general purpose \"free\" 3D asset search engine. Really good if you're searching for one specific thing. Be careful; it includes custom license and sign-up required assets. AmbientCG (Free) - CC0 photorealistic materials. My go-to library for any materials I need for world geometry. Bakery GPU Lightmapper (Paid) - A paid GPU Ray-tracing lightmapper, I find it generally has a more realistically accurate result than the built-in GPU lightmapper. It has a bit of a learning curve, but I personally prefer it. It's available from the Asset Store for a one time fee, and goes on sale often. It also doesn't have the minimum 4gb of VRAM requirement that the built-in GPU lightmapper has, so if you're building on an older machine with low VRAM then it might be your only option. Beautiful Sky by RED_SIM (Paid) - An absolutely gorgeous realtime sky shader by RED_SIM. Just look at this one, trust me. Pixiv/Booth Asset Worlds (Free & Paid) - Booth has been one of the best online storefronts for VRChat assets out there. For world creators, they've even made visitable VRChat worlds that serve as showrooms for assets you can download for free or purchase. Although it's mostly paid assets, there are some free stuff floating around the worlds, so go explore. I felt like a kid in a candy store when I first found out about these worlds. Poiyomi (Free & Paid) - Great general purpose special effect shader. Often used for avatars but includes a \"world\" option better suited for worlds. Lets you openly configure and experiment in realtime, then compiles down to a high performant version when VRChat goes to export. Free for everyone, but also offers a paid subscription with early access for supporters. Poly Haven (Free) - CC0 photoscanned objects, HDRIs, models, and materials. Most of the models are made for renders, so will need reduction and cleanup for use in VRChat. Turbo Squid (Paid) - Most of these models are made for renders, so pretty much all of them will require some cleanup. Some of the models I've purchased have been spectacularly out of date and exported for software I don't have. However their customer services have been spectacular. They offer a free conversion service so if your purchase isn't compatible with your modeling program they will convert it for you in a reasonable number of business days. On one occasion they even offered me a refund on a digital download. Unity Asset Store (Free & Paid) - Pretty obvious, but the list wouldn't be complete without it. VR.Space Furniture Pack (Free & Paid) - A free furniture set with models built for use in VRChat and VR Applications. There is also a paid version, expanded version of the pack (which I can't seem to find). Most of the furniture in my worlds winds up being from these packs.","title":"MyPreferredAssets"},{"location":"Guides/WorldChecklist/","text":"World Checklist Here is my general purpose checklist that I consider while I'm developing a world. Ideally you'll want to get your world out there and in front of people (while you're there to listen) as much as possible. So these aren't TODOs before release, but rather nice-to-haves while you're in the mid to late stages of active development on the world. Checklist [ ] Verify scale of everything in the world using scale models. [ ] CALL TO ACTION - [ ] ALWAYS be able to jump [ ] Verify lightmaps are reasonably efficient [ ] Video Player [ ] Desktop Seats [ ] Verify texture density [ ] Avali flight (if applicable) [ ] Swimmable bodies of water [ ] Decorate skybox with billboards and low poly models","title":"World Checklist"},{"location":"Guides/WorldChecklist/#world-checklist","text":"Here is my general purpose checklist that I consider while I'm developing a world. Ideally you'll want to get your world out there and in front of people (while you're there to listen) as much as possible. So these aren't TODOs before release, but rather nice-to-haves while you're in the mid to late stages of active development on the world.","title":"World Checklist"},{"location":"Guides/WorldChecklist/#checklist","text":"[ ] Verify scale of everything in the world using scale models. [ ] CALL TO ACTION - [ ] ALWAYS be able to jump [ ] Verify lightmaps are reasonably efficient [ ] Video Player [ ] Desktop Seats [ ] Verify texture density [ ] Avali flight (if applicable) [ ] Swimmable bodies of water [ ] Decorate skybox with billboards and low poly models","title":"Checklist"},{"location":"Guides/WorldDevelopment/","text":"World Development [!Notice] This guide is currently under construction and incomplete! It may well contain incorrect information and has not undergone a final review process. If you spot an error or need me to add more information please feel free to report it to me at Aetous@aeto.us . Why? Hello, and thank you for being here. My primary purpose of this guide is to help catalogue my techniques and skills, both for my own future reflection and to document and share these techniques for other who wish to get into making virtual worlds in VRChat and beyond. Forgive me but I'd like to infodump my thoughts, if you just want a tutorial, skip this section. A lot of art and creativity flourishes and dies by the privileges and access to resources by the artists that create it. The same way some people pontificate on the number of Albert Einsteins equivalents are being born into economic situations they can't thrive; so too do artists of all kinds. But we live in an age where access to the internet is ubiquitous for many, and it's arguably visibly on the horizon and in the air for those who desire it and don't yet have it. By sharing my knowledge about virtual world development, I can hand the tools I use to the people who need it for their own endeavors. What to Expect First off I want to set expectations; like every form of art, you don't make virtual worlds to get rich. Some of you might find a way or get lucky, but it's never a given. You make art because you love it. Not for your family or friends, but for you alone . I've spent way to long grinding trying to strike it big, make content that will get me attention. All of it, and I do mean all of it has ultimately failed. Even some of my biggest successes and new accomplishments never felt like my accomplishments because I wasn't doing it for myself. Forgotten Cat Tree , one of my biggest successes took months of labor and burnout only to succeed and feel... meh, I didn't feel any proud of it. With that successful failure, I started making worlds just for myself, nobody else, and that started feeling much better. I went on to make Abstract Backyard Glow and that did moderately well and more or less stepped away from world making, it felt wrong, I was burnt out, and didn't want to do it anymore. Then one day, I made a joke with a friend and slapped together a VRChat meta shitpost world in under two hours one night before bed. And god damnit if that didn't make it through the VRChat Labs clout-gate in less than 48hrs with little to no marketing. In contrast with worlds I've spent 100s of hours working on, that really hurts. Which is why I say don't do this unless you genuinely want too. Don't let yourself get carried away, chasing arbitrary numbers and success for the sake of having something to show for it. Just make things because you enjoy making things. Create things to scratch that itch to create. If you don't feel like you have an itch to create, that's okay too. Usually that just means you haven't found the right medium for you or you just don't know how to stretch your muscles in the medium you've chosen. If you'd like further reading, Adam Savage's Every Tool's a Hammer (ISBN:9781982113476) is really one of my favorites to help ground myself surrounding my creative endeavors. Tools You'll Need Now with the introductory stuff out of the way, lets get down to practical information! Note that this blog assumes you're using VRChat. Note that this is being written around late 2024 and VRChat and it's SDK are subject to change, and I might not always have the time to update the information here. If you run into errors, ask around and check the official VRChat Creator Docs and or the general purpose documentation . Here's what you'll need (don't worry all of these are free): VRChat Creator Companion (Also known as the VCC.) - micromanages project package updates and can even install the correct version of Unity for you. Unity Hub - Micromanages your Unity installs, lets you add and remove platform export packages at any time. Requires a free Unity account. If the VCC ever has trouble installing Unity it might ask you to install it through Unity Hub. Great if you're also a Unity dev or need to export content for ChilloutVR or VSeeFace , which may require different unique Unity versions. Current supported version of the Unity Editor - Whatever version of Unity VRChat's currently using. When asked, if you have the space, I always recommend installing the Android build module (for exporting for Quest and Android players) and the iOS module (for building for iOS players). They take a few GB of extra space. Preferred model editor with a .FBX export format. ( Blender is recommended.) Preferred image/texture editor with .PNG export format ( Paint.NET or Krita are recommended.) Windows OS - Yes. I know. I hate it too. But so far the most stable and only officially supported editor OS for VRChat is Windows. If you're a Linux daily driver, I'd advise just getting Windows disk and dual booting just for this. Trust me, it's just not worth the headache of trying to run Unity over proton or in a VM. At least 20-30gb of room to spare on your project folder's drive and on the drive you have Unity installed on, preferably on an SSD if possible. Unity itself will need a large amount of cache space to store all the libraries and packages the editor needs. And due to how Unity works, the size of a project folder can easily become 2-3x larger than it's source files. (Still more space efficient than Unreal Engine, by a wide margin.) The breadth of skills and disciplines that go into making virtual worlds is incredibly diverse, so your choice of tools will reflect what you're most comfortable with. Installation There are some installation gatchas that might trip you up or be inconvenient; here are some of my suggestions: I recommend first installing Unity Hub then the VCC, this way the VCC can call upon Unity Hub if it needs it. Install Blender through the website installer not through Steam (yes it's on Steam). Unity will automatically call upon Blender to export .blend files (and maybe a few other types of files) in your project to .fbx at import time. But Unity can struggle to identify Blender if it's installed through steam. Project Setup If you're not making worlds for specific clients or with specific asset restrictions, I recommend just making one mega unity project to contain all your worlds. Yes, it will take longer to load up, but it makes maintaining your asset libraries and keeping your preferred plugins up to date much easier. You only have to bother updating the packages and unity version of one project. To create your project use the VCC mentioned previously, if not already done so, it will make sure you have the correct unity version installed. When you create a new project, just follow Preproduction & Coming up with Ideas So of course, if you're going to be making a world, you have to already have and idea of what you want your world to look like. If you already have a well defined vision, you can skip this section. Make a list of everything you want in a VRC world, make some sketches, throw together a mood board, whatever works for you the best! Its way easier to learn new tools when you know what you're working towards. For mood boards, I strongly recommend PureRef , its a freemium virtual mood board program, it's got a bit of a learning curve, but it can really help pull ideas together. Of course, you don't strictly have to go into a world project knowing what you want, but it saves time. For Abstract Backyard Glow (ABG) I designed the original floorplan by throwing a handful of pencils and pens on the floor, then vaguely rearranging them until they made a satisfying shape. I knew I wanted a sense of \"unreality\" and an aesthetic of a suburban American back yard, so I went to AmbientCG and found some materials to match the vibe I was going for. All of this preproduction meant that the general shape of the first version of ABG was completed in a sitting or two, with further refinements, feedback, and additions later. Design and Conquer Mobile-First Design https://www.geeksforgeeks.org/mobile-first-design/# Assets, Assets, and More Assets Okay, so you've figured out what you want, now it's time to go shopping! For assets I mean. I'd recommend browsing my Prefered Assets List , and exploring what they have to offer. Depending on what you want, you likely don't need to spend any money. There are more than enough sources of free assets to put together a really nice world. Importing Into Unity Avoiding Asset Duplication Blender Asset Libraries Modeling & Geometry Great! So now you've got an idea of what you want and have the resources to do it. Lets start making it a reality! Fire up your preferred environment modelling tool and lay out the vague shape of your space using low poly meshes and primatives. Don't spend too much time on it! This is called Greyboxing . Greyboxing is the process of laying out a level or virtual space using simple geometry to experiment and verify your assumptions about a space before investing dozens of hours making it pretty. It's also recommended to use debug materials and surfaces, so you can better visually parse the geometry. For blender users, I recommend WorldUV , which will perform one button world-space UV unwrapping in a method similar to Source Engine. Keeping things to scale Cool! Now you've got a basic world geometry! But is it in the right scale and proportions? The best way to check is to use a Scale Model: Avatar shown is Mayu by Azuki . Bevel Your Edges! Have you ever noticed convex corners inside buildings aren't perfectly sharp? I mean really noticed, go and find one and touch it if you haven't considered it. If it's too sharp, construction crews might sand down the edge so it's not so sharp it scratches you or chips when bumped. Now, you might have also realized that a lot of the edges in your world model all have mathematically perfect sharp edges. If your consciousness hasn't your subconscious almost certainly has. The sharp edge subconsciously contributing to a very slight sense of unease so your body can avoid physical injury. Of course your mind knows it's not real and poses no danger, but your survival instinct's don't care. By simply giving all the sharp corners a slight bevel, you can eliminate this source of anxiety. Just a single plane will do. It's best to do this toward the end of developing a world or section, because it can overcomplicate editing the mesh. Optimization The most controversial word in the VRChat creative community. Like all of software there is no \"silver bullet\" or magic solution. Only a laundry list of different suggestions and techniques. Different worlds can have bad performance for a diverse number reasons. Both the device and It's platform can play a huge role. Recall back to the section on the [[#Mobile-First Design]], to make your world accessible to the highest number of people you'll want to intentionally target the least performant option. Higher performant devices won't even break a sweat if the world's built to run on lower ones, and you can always crank up settings and add more for the higher performing ones. Of course not all world ideas can run on quest or minimum spec android devices, and if yours can't then its not your problem to solve, and that's okay. Don't feel bad about it, it's a design approach, not a moral decision. From my experience, optimizing a world comes down to having an internal understanding about what's necessary to achieve your vision, and making an effort to avoid using excess resources. All of these considerations may be interdependent, and can limit your ability to make changes to your world later. So for now, just consider them and keep them in mind. Culling If you haven't noticed (and if it works correctly, you won't) Unity will do it's best to try and cull (temporarily hide) objects that are both offscreen ( Frustrum Culling ) and objects that are occluded (or hidden) behind others ( Occlusion Culling ). Reasonable Meshing If you've got a cluster of objects, say, a circle of beanbags like in my Omni world, and they're all using the same material, you can theoretically combine them into just one mesh. However, bare in mind that meshes can't be partially culled, they are either culled or they aren't. It's best to group objects by proximity. If all the chairs in a world are one singular giant mesh, then when one chair is rendered, all the chairs are being rendered. Reasonable Materials Draw Calls Dynamic VS Baked Lighting Using dynamic lighting when it's not necessary is one of the easiest mistakes beginner world devs can make that can absolutely tank the performance of the world. It's aways best to just used Baked Lighting and avoid Dynamic Lighting at all costs unless you explicitly need dynamic lights for an important purpose. For the best crash course on https://www.youtube.com/watch?v=NOv31HSqs6U (TODO: ask Hiyu for permission to embed.) Reign in Post Processing","title":"World Development"},{"location":"Guides/WorldDevelopment/#world-development","text":"[!Notice] This guide is currently under construction and incomplete! It may well contain incorrect information and has not undergone a final review process. If you spot an error or need me to add more information please feel free to report it to me at Aetous@aeto.us .","title":"World Development"},{"location":"Guides/WorldDevelopment/#why","text":"Hello, and thank you for being here. My primary purpose of this guide is to help catalogue my techniques and skills, both for my own future reflection and to document and share these techniques for other who wish to get into making virtual worlds in VRChat and beyond. Forgive me but I'd like to infodump my thoughts, if you just want a tutorial, skip this section. A lot of art and creativity flourishes and dies by the privileges and access to resources by the artists that create it. The same way some people pontificate on the number of Albert Einsteins equivalents are being born into economic situations they can't thrive; so too do artists of all kinds. But we live in an age where access to the internet is ubiquitous for many, and it's arguably visibly on the horizon and in the air for those who desire it and don't yet have it. By sharing my knowledge about virtual world development, I can hand the tools I use to the people who need it for their own endeavors.","title":"Why?"},{"location":"Guides/WorldDevelopment/#what-to-expect","text":"First off I want to set expectations; like every form of art, you don't make virtual worlds to get rich. Some of you might find a way or get lucky, but it's never a given. You make art because you love it. Not for your family or friends, but for you alone . I've spent way to long grinding trying to strike it big, make content that will get me attention. All of it, and I do mean all of it has ultimately failed. Even some of my biggest successes and new accomplishments never felt like my accomplishments because I wasn't doing it for myself. Forgotten Cat Tree , one of my biggest successes took months of labor and burnout only to succeed and feel... meh, I didn't feel any proud of it. With that successful failure, I started making worlds just for myself, nobody else, and that started feeling much better. I went on to make Abstract Backyard Glow and that did moderately well and more or less stepped away from world making, it felt wrong, I was burnt out, and didn't want to do it anymore. Then one day, I made a joke with a friend and slapped together a VRChat meta shitpost world in under two hours one night before bed. And god damnit if that didn't make it through the VRChat Labs clout-gate in less than 48hrs with little to no marketing. In contrast with worlds I've spent 100s of hours working on, that really hurts. Which is why I say don't do this unless you genuinely want too. Don't let yourself get carried away, chasing arbitrary numbers and success for the sake of having something to show for it. Just make things because you enjoy making things. Create things to scratch that itch to create. If you don't feel like you have an itch to create, that's okay too. Usually that just means you haven't found the right medium for you or you just don't know how to stretch your muscles in the medium you've chosen. If you'd like further reading, Adam Savage's Every Tool's a Hammer (ISBN:9781982113476) is really one of my favorites to help ground myself surrounding my creative endeavors.","title":"What to Expect"},{"location":"Guides/WorldDevelopment/#tools-youll-need","text":"Now with the introductory stuff out of the way, lets get down to practical information! Note that this blog assumes you're using VRChat. Note that this is being written around late 2024 and VRChat and it's SDK are subject to change, and I might not always have the time to update the information here. If you run into errors, ask around and check the official VRChat Creator Docs and or the general purpose documentation . Here's what you'll need (don't worry all of these are free): VRChat Creator Companion (Also known as the VCC.) - micromanages project package updates and can even install the correct version of Unity for you. Unity Hub - Micromanages your Unity installs, lets you add and remove platform export packages at any time. Requires a free Unity account. If the VCC ever has trouble installing Unity it might ask you to install it through Unity Hub. Great if you're also a Unity dev or need to export content for ChilloutVR or VSeeFace , which may require different unique Unity versions. Current supported version of the Unity Editor - Whatever version of Unity VRChat's currently using. When asked, if you have the space, I always recommend installing the Android build module (for exporting for Quest and Android players) and the iOS module (for building for iOS players). They take a few GB of extra space. Preferred model editor with a .FBX export format. ( Blender is recommended.) Preferred image/texture editor with .PNG export format ( Paint.NET or Krita are recommended.) Windows OS - Yes. I know. I hate it too. But so far the most stable and only officially supported editor OS for VRChat is Windows. If you're a Linux daily driver, I'd advise just getting Windows disk and dual booting just for this. Trust me, it's just not worth the headache of trying to run Unity over proton or in a VM. At least 20-30gb of room to spare on your project folder's drive and on the drive you have Unity installed on, preferably on an SSD if possible. Unity itself will need a large amount of cache space to store all the libraries and packages the editor needs. And due to how Unity works, the size of a project folder can easily become 2-3x larger than it's source files. (Still more space efficient than Unreal Engine, by a wide margin.) The breadth of skills and disciplines that go into making virtual worlds is incredibly diverse, so your choice of tools will reflect what you're most comfortable with.","title":"Tools You'll Need"},{"location":"Guides/WorldDevelopment/#installation","text":"There are some installation gatchas that might trip you up or be inconvenient; here are some of my suggestions: I recommend first installing Unity Hub then the VCC, this way the VCC can call upon Unity Hub if it needs it. Install Blender through the website installer not through Steam (yes it's on Steam). Unity will automatically call upon Blender to export .blend files (and maybe a few other types of files) in your project to .fbx at import time. But Unity can struggle to identify Blender if it's installed through steam.","title":"Installation"},{"location":"Guides/WorldDevelopment/#project-setup","text":"If you're not making worlds for specific clients or with specific asset restrictions, I recommend just making one mega unity project to contain all your worlds. Yes, it will take longer to load up, but it makes maintaining your asset libraries and keeping your preferred plugins up to date much easier. You only have to bother updating the packages and unity version of one project. To create your project use the VCC mentioned previously, if not already done so, it will make sure you have the correct unity version installed. When you create a new project, just follow","title":"Project Setup"},{"location":"Guides/WorldDevelopment/#preproduction-coming-up-with-ideas","text":"So of course, if you're going to be making a world, you have to already have and idea of what you want your world to look like. If you already have a well defined vision, you can skip this section. Make a list of everything you want in a VRC world, make some sketches, throw together a mood board, whatever works for you the best! Its way easier to learn new tools when you know what you're working towards. For mood boards, I strongly recommend PureRef , its a freemium virtual mood board program, it's got a bit of a learning curve, but it can really help pull ideas together. Of course, you don't strictly have to go into a world project knowing what you want, but it saves time. For Abstract Backyard Glow (ABG) I designed the original floorplan by throwing a handful of pencils and pens on the floor, then vaguely rearranging them until they made a satisfying shape. I knew I wanted a sense of \"unreality\" and an aesthetic of a suburban American back yard, so I went to AmbientCG and found some materials to match the vibe I was going for. All of this preproduction meant that the general shape of the first version of ABG was completed in a sitting or two, with further refinements, feedback, and additions later.","title":"Preproduction &amp; Coming up with Ideas"},{"location":"Guides/WorldDevelopment/#design-and-conquer","text":"","title":"Design and Conquer"},{"location":"Guides/WorldDevelopment/#mobile-first-design","text":"https://www.geeksforgeeks.org/mobile-first-design/#","title":"Mobile-First Design"},{"location":"Guides/WorldDevelopment/#assets-assets-and-more-assets","text":"Okay, so you've figured out what you want, now it's time to go shopping! For assets I mean. I'd recommend browsing my Prefered Assets List , and exploring what they have to offer. Depending on what you want, you likely don't need to spend any money. There are more than enough sources of free assets to put together a really nice world.","title":"Assets, Assets, and More Assets"},{"location":"Guides/WorldDevelopment/#importing-into-unity","text":"","title":"Importing Into Unity"},{"location":"Guides/WorldDevelopment/#avoiding-asset-duplication","text":"","title":"Avoiding Asset Duplication"},{"location":"Guides/WorldDevelopment/#blender-asset-libraries","text":"","title":"Blender Asset Libraries"},{"location":"Guides/WorldDevelopment/#modeling-geometry","text":"Great! So now you've got an idea of what you want and have the resources to do it. Lets start making it a reality! Fire up your preferred environment modelling tool and lay out the vague shape of your space using low poly meshes and primatives. Don't spend too much time on it! This is called Greyboxing . Greyboxing is the process of laying out a level or virtual space using simple geometry to experiment and verify your assumptions about a space before investing dozens of hours making it pretty. It's also recommended to use debug materials and surfaces, so you can better visually parse the geometry. For blender users, I recommend WorldUV , which will perform one button world-space UV unwrapping in a method similar to Source Engine.","title":"Modeling &amp; Geometry"},{"location":"Guides/WorldDevelopment/#keeping-things-to-scale","text":"Cool! Now you've got a basic world geometry! But is it in the right scale and proportions? The best way to check is to use a Scale Model: Avatar shown is Mayu by Azuki .","title":"Keeping things to scale"},{"location":"Guides/WorldDevelopment/#bevel-your-edges","text":"Have you ever noticed convex corners inside buildings aren't perfectly sharp? I mean really noticed, go and find one and touch it if you haven't considered it. If it's too sharp, construction crews might sand down the edge so it's not so sharp it scratches you or chips when bumped. Now, you might have also realized that a lot of the edges in your world model all have mathematically perfect sharp edges. If your consciousness hasn't your subconscious almost certainly has. The sharp edge subconsciously contributing to a very slight sense of unease so your body can avoid physical injury. Of course your mind knows it's not real and poses no danger, but your survival instinct's don't care. By simply giving all the sharp corners a slight bevel, you can eliminate this source of anxiety. Just a single plane will do. It's best to do this toward the end of developing a world or section, because it can overcomplicate editing the mesh.","title":"Bevel Your Edges!"},{"location":"Guides/WorldDevelopment/#optimization","text":"The most controversial word in the VRChat creative community. Like all of software there is no \"silver bullet\" or magic solution. Only a laundry list of different suggestions and techniques. Different worlds can have bad performance for a diverse number reasons. Both the device and It's platform can play a huge role. Recall back to the section on the [[#Mobile-First Design]], to make your world accessible to the highest number of people you'll want to intentionally target the least performant option. Higher performant devices won't even break a sweat if the world's built to run on lower ones, and you can always crank up settings and add more for the higher performing ones. Of course not all world ideas can run on quest or minimum spec android devices, and if yours can't then its not your problem to solve, and that's okay. Don't feel bad about it, it's a design approach, not a moral decision. From my experience, optimizing a world comes down to having an internal understanding about what's necessary to achieve your vision, and making an effort to avoid using excess resources. All of these considerations may be interdependent, and can limit your ability to make changes to your world later. So for now, just consider them and keep them in mind.","title":"Optimization"},{"location":"Guides/WorldDevelopment/#culling","text":"If you haven't noticed (and if it works correctly, you won't) Unity will do it's best to try and cull (temporarily hide) objects that are both offscreen ( Frustrum Culling ) and objects that are occluded (or hidden) behind others ( Occlusion Culling ).","title":"Culling"},{"location":"Guides/WorldDevelopment/#reasonable-meshing","text":"If you've got a cluster of objects, say, a circle of beanbags like in my Omni world, and they're all using the same material, you can theoretically combine them into just one mesh. However, bare in mind that meshes can't be partially culled, they are either culled or they aren't. It's best to group objects by proximity. If all the chairs in a world are one singular giant mesh, then when one chair is rendered, all the chairs are being rendered.","title":"Reasonable Meshing"},{"location":"Guides/WorldDevelopment/#reasonable-materials","text":"","title":"Reasonable Materials"},{"location":"Guides/WorldDevelopment/#draw-calls","text":"","title":"Draw Calls"},{"location":"Guides/WorldDevelopment/#dynamic-vs-baked-lighting","text":"Using dynamic lighting when it's not necessary is one of the easiest mistakes beginner world devs can make that can absolutely tank the performance of the world. It's aways best to just used Baked Lighting and avoid Dynamic Lighting at all costs unless you explicitly need dynamic lights for an important purpose. For the best crash course on https://www.youtube.com/watch?v=NOv31HSqs6U (TODO: ask Hiyu for permission to embed.)","title":"Dynamic VS Baked Lighting"},{"location":"Guides/WorldDevelopment/#reign-in-post-processing","text":"","title":"Reign in Post Processing"},{"location":"Worlds/Abstract%20Backyard%20Glow/","text":"Abstract Backyard Glow VRChat: https://vrchat.com/home/world/wrld_6f5e49b9-6134-4c87-b873-2a09ebd1fec2 Abstract Backyard Glow was the first world I made using my new (now moderately aged) laptop that I'm currently writing this on. I had originally planned on using it to find new multiplatform workflows, but that had proved to be more complicated than initially though. The world tries to exhibit a sense of unreality with the energy of a suburban American backyard. The world itself floats in an endless open sky with decorative waterfalls of lawn beyond the latices.","title":"Abstract Backyard Glow"},{"location":"Worlds/Abstract%20Backyard%20Glow/#abstract-backyard-glow","text":"VRChat: https://vrchat.com/home/world/wrld_6f5e49b9-6134-4c87-b873-2a09ebd1fec2 Abstract Backyard Glow was the first world I made using my new (now moderately aged) laptop that I'm currently writing this on. I had originally planned on using it to find new multiplatform workflows, but that had proved to be more complicated than initially though. The world tries to exhibit a sense of unreality with the energy of a suburban American backyard. The world itself floats in an endless open sky with decorative waterfalls of lawn beyond the latices.","title":"Abstract Backyard Glow"},{"location":"Worlds/Forgotten%20Cat%20Tree/","text":"Forgotten Cat Tree VRChat: https://vrchat.com/home/world/wrld_463453b8-4710-4d46-97a5-8c617b0727ca Forgotten Cat Tree Logo made by ArranAsh. Forgotten Cat Tree was my first ever world to break out of VRChat Labs. Before it I had spend years (after realizing my Unity skills were actually useful for something) building small worlds that looked like shit. I had made meetup worlds, memes, attempted to make a couple game worlds but didn't get far. Nothing worked. I was at the end of my rope as a VRChat artist. There was an unshakable aura that I, after years of effort, had be more or less forgotten as a creator. That's where the \"Forgotten\" name comes from. It's a self deprecatory acknowledgement that my work just might go unappreciated and be forgotten to time. I had burned myself out. After a brutal month long grind I just completely gave up. My friends however did not. They continued promoting it after I had thrown in the towel. A couple of them distributed my world on VRC world hopping and photography communities, blasting the worlds popularity well over the threshold and to this day it is still my most visited world of all time.","title":"Forgotten Cat Tree"},{"location":"Worlds/Forgotten%20Cat%20Tree/#forgotten-cat-tree","text":"VRChat: https://vrchat.com/home/world/wrld_463453b8-4710-4d46-97a5-8c617b0727ca Forgotten Cat Tree Logo made by ArranAsh. Forgotten Cat Tree was my first ever world to break out of VRChat Labs. Before it I had spend years (after realizing my Unity skills were actually useful for something) building small worlds that looked like shit. I had made meetup worlds, memes, attempted to make a couple game worlds but didn't get far. Nothing worked. I was at the end of my rope as a VRChat artist. There was an unshakable aura that I, after years of effort, had be more or less forgotten as a creator. That's where the \"Forgotten\" name comes from. It's a self deprecatory acknowledgement that my work just might go unappreciated and be forgotten to time. I had burned myself out. After a brutal month long grind I just completely gave up. My friends however did not. They continued promoting it after I had thrown in the towel. A couple of them distributed my world on VRC world hopping and photography communities, blasting the worlds popularity well over the threshold and to this day it is still my most visited world of all time.","title":"Forgotten Cat Tree"},{"location":"Worlds/ISWM%20W2G/","text":"ISWM W2G VRChat: https://vrchat.com/home/launch?worldId=wrld_aae93cca-e5d4-44b7-aedf-04b28c056e9f ISWM W2G is an unofficial In Space With Markiplier viewing world for VRChat. The world utilizes an USharp Video being controlled by a custom written controller. All of the decisions and paths in the show are precached in-world then loaded dynamically using VRChat's provided Udon JSON libraries. All content is streamed by video streaming libraries built into VRChat. How It Works To the untrained eye; it looks like either a fan project or a cheap clout grab. But to the trained eye it seems like this shouldn't exist, and it almost didn't exist at all. For context In Space With Markiplier is a free YouTube Original comedy adventure show that features an interactive branching storyline . The show uses the platform universal YouTube Cards to enable the viewer(s) to make active decisions in the narrative making choices as their own character, \"The Captain\", in the show. Well that's interesting, but what if I want to watch it with my friends across the globe in VRChat? Well... as of making this world and as of writing this months after the fact; VRChat's video player system does not support YouTube Cards or metadata in any capacity. No thumbnails, no descriptions. Worst of all, VRChat's web query system doesn't support procedurally generated dynamic web requesting. All web requests must either be manually inserted by a user at runtime or permanently baked in-full into the world by the developer. In order for this show to work at all in VRChat, I had to make a custom solution from scratch. So I made custom solution from scratch. First, I needed to build a database. So using NodeJS running YT-DLP commands, I wrote a simple webcrawler to dynamically crawl the entirety of the show from start to finish, visiting every possible choice on every possible path, and building a non-linear linked list of the entire decision tree of the show (approximately 97 unique videos) and exporting it as a JSON file. Every node contained the title of the video, it's description, and it's unique ID and link. After some manual data integrity checking and cleanup, I used a second webcrawler to pre-download all the thumbnails of every video in the show so they could be baked into the VRChat world. After that I built a custom UdonSharp (modified Unity C# for VRChat) state machine that was capable of now tokenizing and navigating the decision tree linked-list at runtime in the VRChat Client while displaying fake YouTube cards onscreen for users to vote on and navigate the show. The state machine can pull the IDs of a particular video's choices and look up the thumbnails, and titles, by their ID and displaying them onscreen in the cards. There are also multiple sets of cards in configuration of 1-4 the state machine picks from to display the choices. But of course, VRChat's web query system can't dynamically load links that aren't baked into a world. But inks must be wrapped in a VRCURL container, who's constructor only exists in the Unity Editor . So I wrote a custom editor that will take a reference to the JSON file and with a button press creates and prefills an array with VRCURL s for every video in the show. That array then gets baked into the world and accessed by the controller at runtime to feed the video URLs into the player.","title":"ISWM W2G"},{"location":"Worlds/ISWM%20W2G/#iswm-w2g","text":"VRChat: https://vrchat.com/home/launch?worldId=wrld_aae93cca-e5d4-44b7-aedf-04b28c056e9f ISWM W2G is an unofficial In Space With Markiplier viewing world for VRChat. The world utilizes an USharp Video being controlled by a custom written controller. All of the decisions and paths in the show are precached in-world then loaded dynamically using VRChat's provided Udon JSON libraries. All content is streamed by video streaming libraries built into VRChat.","title":"ISWM W2G"},{"location":"Worlds/ISWM%20W2G/#how-it-works","text":"To the untrained eye; it looks like either a fan project or a cheap clout grab. But to the trained eye it seems like this shouldn't exist, and it almost didn't exist at all. For context In Space With Markiplier is a free YouTube Original comedy adventure show that features an interactive branching storyline . The show uses the platform universal YouTube Cards to enable the viewer(s) to make active decisions in the narrative making choices as their own character, \"The Captain\", in the show. Well that's interesting, but what if I want to watch it with my friends across the globe in VRChat? Well... as of making this world and as of writing this months after the fact; VRChat's video player system does not support YouTube Cards or metadata in any capacity. No thumbnails, no descriptions. Worst of all, VRChat's web query system doesn't support procedurally generated dynamic web requesting. All web requests must either be manually inserted by a user at runtime or permanently baked in-full into the world by the developer. In order for this show to work at all in VRChat, I had to make a custom solution from scratch.","title":"How It Works"},{"location":"Worlds/ISWM%20W2G/#so-i-made-custom-solution-from-scratch","text":"First, I needed to build a database. So using NodeJS running YT-DLP commands, I wrote a simple webcrawler to dynamically crawl the entirety of the show from start to finish, visiting every possible choice on every possible path, and building a non-linear linked list of the entire decision tree of the show (approximately 97 unique videos) and exporting it as a JSON file. Every node contained the title of the video, it's description, and it's unique ID and link. After some manual data integrity checking and cleanup, I used a second webcrawler to pre-download all the thumbnails of every video in the show so they could be baked into the VRChat world. After that I built a custom UdonSharp (modified Unity C# for VRChat) state machine that was capable of now tokenizing and navigating the decision tree linked-list at runtime in the VRChat Client while displaying fake YouTube cards onscreen for users to vote on and navigate the show. The state machine can pull the IDs of a particular video's choices and look up the thumbnails, and titles, by their ID and displaying them onscreen in the cards. There are also multiple sets of cards in configuration of 1-4 the state machine picks from to display the choices. But of course, VRChat's web query system can't dynamically load links that aren't baked into a world. But inks must be wrapped in a VRCURL container, who's constructor only exists in the Unity Editor . So I wrote a custom editor that will take a reference to the JSON file and with a button press creates and prefills an array with VRCURL s for every video in the show. That array then gets baked into the world and accessed by the controller at runtime to feed the video URLs into the player.","title":"So I made custom solution from scratch."},{"location":"Worlds/Omni/","text":"Forgotten Omni VRChat: https://vrchat.com/home/launch?worldId=wrld_0906abc4-faf8-4961-8eea-4afddfce2e45 Forgotten Omni is a smaller oceanic world inspired in part by Ocean Palace from Sonic Heroes with some other inspirations from my childhood. It's one of my highest detailed worlds, and much of the time it took to develop it was spent cleaning up assets and resources. This time I had focused on a predominantly Blender based workflow, assembling the geometry for more or less the entire world in one blendfile then simply adding Unity and VRChat specific features on top. Attribution AmbientCG Materials Bakery Lightmapper Basically A Sans-serif Font Beautiful Sky by RED_SIM Blender Dolphin in an Aquarium by Kenji Iwasaki Easy Quest Switch FreeHDR Sky Fallback skybox. Poiyomi Pro (Water Shader) Udon Calibrating Chairs Unity Viking Village (Grass texture) VRS Space Pack (Used Premium version, unable to find premium version link) Changelogs 0.3 Fixed unbaked light probes. Expanded ocean floor to horizon Expanded distance of video player audio sources. 0.2 Removed the proximity toggle on outdated version UdonCalibratingChairs that caused an erroneous \"interact\" box to appear on Android and obfuscate the correct. Added sandy shore. Added seagrass patch. Added collider so players can \"swim\" out into the water. Raised Lightmap resolution for standalone. Added experimental video player (might be invisible) Published first iOS build! 0.1 Includes initial release and subsequent releases that got the world past VRC Labs","title":"Forgotten Omni"},{"location":"Worlds/Omni/#forgotten-omni","text":"VRChat: https://vrchat.com/home/launch?worldId=wrld_0906abc4-faf8-4961-8eea-4afddfce2e45 Forgotten Omni is a smaller oceanic world inspired in part by Ocean Palace from Sonic Heroes with some other inspirations from my childhood. It's one of my highest detailed worlds, and much of the time it took to develop it was spent cleaning up assets and resources. This time I had focused on a predominantly Blender based workflow, assembling the geometry for more or less the entire world in one blendfile then simply adding Unity and VRChat specific features on top.","title":"Forgotten Omni"},{"location":"Worlds/Omni/#attribution","text":"AmbientCG Materials Bakery Lightmapper Basically A Sans-serif Font Beautiful Sky by RED_SIM Blender Dolphin in an Aquarium by Kenji Iwasaki Easy Quest Switch FreeHDR Sky Fallback skybox. Poiyomi Pro (Water Shader) Udon Calibrating Chairs Unity Viking Village (Grass texture) VRS Space Pack (Used Premium version, unable to find premium version link)","title":"Attribution"},{"location":"Worlds/Omni/#changelogs","text":"","title":"Changelogs"},{"location":"Worlds/Omni/#03","text":"Fixed unbaked light probes. Expanded ocean floor to horizon Expanded distance of video player audio sources.","title":"0.3"},{"location":"Worlds/Omni/#02","text":"Removed the proximity toggle on outdated version UdonCalibratingChairs that caused an erroneous \"interact\" box to appear on Android and obfuscate the correct. Added sandy shore. Added seagrass patch. Added collider so players can \"swim\" out into the water. Raised Lightmap resolution for standalone. Added experimental video player (might be invisible) Published first iOS build!","title":"0.2"},{"location":"Worlds/Omni/#01","text":"Includes initial release and subsequent releases that got the world past VRC Labs","title":"0.1"},{"location":"Worlds/World%20Is%20Not%20Available/","text":"World Is Not Available VRChat: https://vrchat.com/home/world/wrld_e5ff018f-bb12-42e5-aa59-2de6182f8d96 Built in under 2hrs as a complete joke. All it is is a single image in a gray void with the classic VSauce \"Or is it?\" auditory sting. This is to date the fastest one of my worlds has ever broken out of labs (and I'm still a bit salty about it).","title":"World Is Not Available"},{"location":"Worlds/World%20Is%20Not%20Available/#world-is-not-available","text":"VRChat: https://vrchat.com/home/world/wrld_e5ff018f-bb12-42e5-aa59-2de6182f8d96 Built in under 2hrs as a complete joke. All it is is a single image in a gray void with the classic VSauce \"Or is it?\" auditory sting. This is to date the fastest one of my worlds has ever broken out of labs (and I'm still a bit salty about it).","title":"World Is Not Available"}]}